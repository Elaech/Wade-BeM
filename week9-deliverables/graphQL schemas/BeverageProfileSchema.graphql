"""
The beverageProfileSchema defines queries and mutations regarding the user Beverage Profile information.
The user beverage profile includes a list of beverages with associated scores (given by the user), 
a list of recipes with associated scores (given by the user), a list of offers and a list of reviews, both made by the user.
"""
beverageProfileSchema{
  query{
    """Given an user email get the list of beverages for which the user has associated a score"""
    getBeverages(userEmail:String!){
      beverageList: [Beverage!]
    }  
    """Given an user email get the list of recipes for which the user has associated a score"""
    getRecipes(userEmail:String!){
      recipeList: [Recipe!]
    }
    """Given an user email get the list of offers that the user has created"""
    getOffers(userEmail:String!){
      offerList: [Offer!]
    }
    """Given an user email get the list of reviews that the user has created"""
    getReviews(userEmail:String!){
      reviewList: [Review!]
    }
  }
  mutation{
    """Given an entity of type Score (which indicates that a user identified by an email gave a score to an entity
    of type beverage/offer/recipe, review, add the score value to a specific beverage"""
    addBeverageScore(beverageScore: Score!){
      beverageScore: Score!
    }
    """Given an entity of type Score (which indicates that a user identified by an email gave a score to an entity
    of type beverage/offer/recipe, review, update the score value for a specific beverage"""
    updateBeverageScore(beverageScore: Score!){
      beverageScore: Score!
    }
    """Given an entity of type Score (which indicates that a user identified by an email gave a score to an entity
    of type beverage/offer/recipe, review, delete that score for a specific beverage"""
    deleteBeverageScore(beverageScore: Score!){
      beverageScore: Score!
    }

    """Given an entity of type Score (which indicates that a user identified by an email gave a score to an entity
    of type beverage/offer/recipe, review, add the score value to a specific recipe"""
    addRecipeScore(recipeScore: Score!){
      recipeScore: Score!
    }
    """Given an entity of type Score (which indicates that a user identified by an email gave a score to an entity
    of type beverage/offer/recipe, review, update the score value for a specific recipe"""
    updateRecipeScore(recipeScore: Score!){
      recipeScore: Score!
    }
    """Given an entity of type Score (which indicates that a user identified by an email gave a score to an entity
    of type beverage/offer/recipe, review, delete that score for a specific recipe"""
    deleteRecipeScore(recipeScore: Score!){
      recipeScore: Score!
    }

    """Given an entity of type offer (it has a field that indicates the author of the offer),
    add that offer in the beverage profile list of the user"""
    addOffer(offer: Offer){
      offer: Offer
    }
    """Given fields from an entity of type offer,
    update that offer in the beverage profile list of the user"""
    updateOffer(offer: Offer){
      offer: Offer
    }
    """Given an offer added by a user indentified by an email,
    delete that offer from the beverage profile list of the user"""
    deleteOffer(offer: Offer){
      offer: Offer
    }

    """Given an entity of type review (it has a field that indicates the author of the review),
    add that review in the beverage profile list of the user"""
    addReview(review: Review){
      review: Review
    }
    """Given fields from an entity of type review,
    update that review in the beverage profile list of the user"""
    updateReview(review: Review){
      review: Review
    }
    """Given a review added by a user identified by an email,
    delete that review from the beverage profile list of the user"""
    deleteReview(review: Review){
      review: Review
    }

  }
}

enum ScorableItem{
  BEVERAGE
  RECIPE
  REVIEW
  OFFER
}

"""Score is a type that indicates the score value associated by a user identified by user email,
for an entity of type entityType(recipe/beverage/offeer/review) with an entity id."""
type Score{
  scoreValue: Int!
  userEmail: String!
  entityType: ScorableItem!
  entityID: ID!
}

"""Basic type for beverage"""
type Beverage{
  beverageID: ID!
  beverageName: String!
  beverageUrl: String
  beverageImageUrl: String
  beverageIngredientsImageUrl: String
  beverageNutritionImageUrl: String
  beverageDescription: String
  isMadeOfFruit: Fruit
  isMadeOfVegetable: Vegetable
  hasHealthLabel: HealthLabel
  nutritionInformation: NutritionInformation
  hasProvenanceCountry: Country
  hasCategory: Category
  hasIngredient: Ingredient
  hasOffer: Offer
  hasReview: Review
  hasRecipe: Recipe
  hasBeverageScores: [Score!]
}

"""Basic type for recipe"""
type Recipe{
  recipeID: ID!
  recipeName: String!
  recipeDescription: String
  recipeImageUrl: String
  recipeShareAs: String
  recipeSource: String
  recipeURI: String
  recipeURL: String
  nutritionInformation: NutritionInformation
  hasHealthLabel: HealthLabel
  hasIngredient: Ingredient
  isRecipeFor: Beverage
  hasRecipeScores: [Score!]
}

"""Basic type for review"""
type Review{
  reviewAuthorEmail: String!
  reviewID: ID!
  reviewDescription: String!
  hasReviewScores: [Score!]
}

"""Basic type for offer"""
type Offer{
  offerAuthorEmail: String!
  offerID: ID!
  offerPrice: Int
  offerCurrency: Currency
  offerDescription: String
  hasOfferScores: [Score!]
}

"""Types that are used for describing recipes, beverages, reviews, offers."""
type NutritionInformation {
  calciumContent: Int
  calories: Int
  carbohydrateContent:Int
  cholesterolContent: Int
  fatContent: Int
  fiberContent: Int
  ironContent: Int
  magnesiumContent: Int
  phosphorusContent: Int
  potassiumContent: Int
  proteinContent: Int
  quantity: Int
  sodiumContent: Int
  sugarContent: Int
  vitaminAContent: Int
  vitaminB12Content: Int
  vitaminB6Content: Int
  vitaminCContent: Int
  vitaminDContent: Int
  vitaminEContent: Int
  vitaminKContent: Int
  zincContent: Int
}

type Ingredient{
  ingredientName: String
}

type Category{
  categoryName: String
}

type Country{
  countryName: String
}

type HealthRestriction{
  healthRestrictionName: String 
}

type HealthLabel{
  healthLabelName: String
}

type Fruit{
  fruitName: String
}
type Vegetable{
   vegetableName: String
}

enum BeverageType {
  COFFEE
  DAIRYDRINK
  ENERGYDRINK
  JUICE
  NECTAR
  MILKSHAKE
  MOCKTAIL
  NONALCOHOLICBEER
  SMOOTHIE
  SYRUP
  TEA
  WATER
}




















